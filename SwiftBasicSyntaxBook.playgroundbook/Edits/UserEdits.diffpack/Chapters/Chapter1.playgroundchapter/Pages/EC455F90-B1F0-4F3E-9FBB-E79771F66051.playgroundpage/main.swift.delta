<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

struct Pet {
    init() {
        print("New pet.\n")
    }
}

// Without 'lazy' keyword, var 'name' and 'pet' will be loaded to the memory when the struct is declaired.
struct Friend {
    var name: String
    var pet: Pet = Pet()
    
    init(_ name: String) {
        self.name = name
        print("\nWithout 'lazy' keyworkd: Friend1 is created.\n")
    }
}


var myFriend = Friend("Raymond")
print(myFriend)  // Friend(name: "Raymond", pet: Page_Contents.Pet())

print()

// The same will be applied to classes and structs as well.
struct Friend2 {
    var name: String
    
    // With 'lazy' keyword, the instance will not be initialized at the time.
    // Set the initial value as follows.
    lazy var pet: Pet = Pet()
    
    init(_ name: String) {
        self.name = name
        print("\nWith 'lazy' keyword: Now you have your friend.\n")
    }
}

// Without the 'lazy' keyword, the instance 'Pet' will be created when the 'Friend' instance is created.
var myFriend2 = Friend2("Garlicvread")
print(myFriend2)  // Friend2(name: "Garlicvread", $__lazy_storage_$_pet: nil)

myFriend2.pet = Pet()  // myfriend2.pet is initialized here --&gt; Note that 'New pet' is printed.
print(myFriend2)  // Friend2(name: "Garlicvread", $__lazy_storage_$_pet: Optional(Page_Contents.Pet())) &lt;-- Pet() is loaded
</string>
			<key>ModifiedRange</key>
			<string>{1, 1321}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
